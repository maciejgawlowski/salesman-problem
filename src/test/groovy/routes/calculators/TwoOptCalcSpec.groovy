package routes.calculators

import tsp.domain.PointsDistance
import tsp.domain.TSPResult
import tsp.routes.calculators.TwoOptCalc
import spock.lang.Specification
import spock.lang.Unroll
import tsp.data.loader.CitiesDistancesLoader

@Unroll
class TwoOptCalcSpec extends Specification {
    private static final String DISTANCES_FILENAME = "D:/IdeaProjects/salesman-problem/src/test/resources/test_main_polish_cities_distances.txt"

    List<PointsDistance> pointsDistances

    def setup() {
        pointsDistances = CitiesDistancesLoader.load(DISTANCES_FILENAME)
    }

    def "Should do swap between Szczecin-Bia씇stok-Gda認k-Rzesz雕"() {
        expect:
        TwoOptCalc.getPath(pointsDistances, currentResult) == expectedResult

        where:
        currentResult << [
                TSPResult.builder().pointsOrder(Arrays.asList("Szczecin", "Bia씇stok", "Gda認k", "Rzesz雕", "Wroc쓰w", "Szczecin")).totalDistance(572+328+532+371+307).build(),
                TSPResult.builder().pointsOrder(Arrays.asList("Bia씇stok", "Gda認k", "Rzesz雕", "Wroc쓰w", "Szczecin", "Bia씇stok")).totalDistance(572+328+532+371+307).build(),
                TSPResult.builder().pointsOrder(Arrays.asList("Gda認k", "Rzesz雕", "Wroc쓰w", "Szczecin", "Bia씇stok", "Gda認k")).totalDistance(572+328+532+371+307).build(),
                TSPResult.builder().pointsOrder(Arrays.asList("Rzesz雕", "Wroc쓰w", "Szczecin", "Bia씇stok", "Gda認k", "Rzesz雕")).totalDistance(572+328+532+371+307).build(),
                TSPResult.builder().pointsOrder(Arrays.asList("Wroc쓰w", "Szczecin", "Bia씇stok", "Gda認k", "Rzesz雕", "Wroc쓰w")).totalDistance(572+328+532+371+307).build()
        ]

        expectedResult << [
                TSPResult.builder().pointsOrder(Arrays.asList("Szczecin", "Gda認k", "Bia씇stok", "Rzesz雕", "Wroc쓰w", "Szczecin")).totalDistance(286+328+352+371+307).build(),
                TSPResult.builder().pointsOrder(Arrays.asList("Bia씇stok", "Gda認k", "Szczecin", "Wroc쓰w", "Rzesz雕", "Bia씇stok")).totalDistance(286+328+352+371+307).build(),
                TSPResult.builder().pointsOrder(Arrays.asList("Gda認k", "Szczecin", "Wroc쓰w", "Rzesz雕", "Bia씇stok", "Gda認k")).totalDistance(286+328+352+371+307).build(),
                TSPResult.builder().pointsOrder(Arrays.asList("Rzesz雕", "Wroc쓰w", "Szczecin", "Gda認k", "Bia씇stok", "Rzesz雕")).totalDistance(286+328+352+371+307).build(),
                TSPResult.builder().pointsOrder(Arrays.asList("Wroc쓰w", "Szczecin", "Gda認k", "Bia씇stok", "Rzesz雕", "Wroc쓰w")).totalDistance(286+328+352+371+307).build()
        ]
    }

    def "Should not do swap"() {
        given:
        TSPResult currentResult = TSPResult.builder().pointsOrder(Arrays.asList("Szczecin", "Gda認k", "Bia씇stok", "Rzesz雕", "Wroc쓰w", "Szczecin")).totalDistance(286+328+352+371+307).build()

        expect:
        TwoOptCalc.getPath(pointsDistances, currentResult) == currentResult
    }
}